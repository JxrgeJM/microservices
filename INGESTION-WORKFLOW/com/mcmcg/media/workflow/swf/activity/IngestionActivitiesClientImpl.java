/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.mcmcg.media.workflow.swf.activity;

import com.amazonaws.services.simpleworkflow.flow.ActivitiesClientBase;
import com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions;
import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericActivityClient;
import com.amazonaws.services.simpleworkflow.model.ActivityType;

public class IngestionActivitiesClientImpl extends ActivitiesClientBase implements IngestionActivitiesClient {

	public IngestionActivitiesClientImpl() {
        this(null, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public IngestionActivitiesClientImpl(GenericActivityClient genericClient) {
        this(genericClient, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }
    
    public IngestionActivitiesClientImpl(GenericActivityClient genericClient, 
            DataConverter dataConverter, ActivitySchedulingOptions schedulingOptions) {
            
        super(genericClient, dataConverter, schedulingOptions);
    }
    
    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(java.util.Map<java.lang.String,java.lang.Object> contextMap) {
        return autoValidationImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor) {
        return autoValidationImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return autoValidationImpl(Promise.asPromise(contextMap), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap) {
        return autoValidationImpl(contextMap, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor) {
        return autoValidationImpl(contextMap, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return autoValidationImpl(contextMap, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidationImpl(final Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("3-AutoValidation");
		activityType.setVersion("1.3.2");

        Promise[] _input_ = new Promise[1];
        _input_[0] = contextMap;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, com.mcmcg.media.workflow.service.domain.Response.class, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(java.util.Map<java.lang.String,java.lang.Object> contextMap) {
        return extractionImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor) {
        return extractionImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return extractionImpl(Promise.asPromise(contextMap), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap) {
        return extractionImpl(contextMap, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor) {
        return extractionImpl(contextMap, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return extractionImpl(contextMap, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extractionImpl(final Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("2-Extraction");
		activityType.setVersion("1.3.2");

        Promise[] _input_ = new Promise[1];
        _input_[0] = contextMap;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, com.mcmcg.media.workflow.service.domain.Response.class, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(java.util.Map<java.lang.String,java.lang.Object> contextMap) {
        return pdfTaggingImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor) {
        return pdfTaggingImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return pdfTaggingImpl(Promise.asPromise(contextMap), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap) {
        return pdfTaggingImpl(contextMap, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor) {
        return pdfTaggingImpl(contextMap, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return pdfTaggingImpl(contextMap, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTaggingImpl(final Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("5-PDFTagging");
		activityType.setVersion("1.3.2");

        Promise[] _input_ = new Promise[1];
        _input_[0] = contextMap;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, com.mcmcg.media.workflow.service.domain.Response.class, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(java.util.Map<java.lang.String,java.lang.Object> contextMap) {
        return receiveImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor) {
        return receiveImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return receiveImpl(Promise.asPromise(contextMap), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap) {
        return receiveImpl(contextMap, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor) {
        return receiveImpl(contextMap, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return receiveImpl(contextMap, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receiveImpl(final Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("6-Receive");
		activityType.setVersion("1.3.2");

        Promise[] _input_ = new Promise[1];
        _input_[0] = contextMap;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, com.mcmcg.media.workflow.service.domain.Response.class, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(java.util.Map<java.lang.String,java.lang.Object> contextMap) {
        return statementTranslationImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor) {
        return statementTranslationImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return statementTranslationImpl(Promise.asPromise(contextMap), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap) {
        return statementTranslationImpl(contextMap, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor) {
        return statementTranslationImpl(contextMap, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return statementTranslationImpl(contextMap, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslationImpl(final Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("4-StatementTranslation");
		activityType.setVersion("1.3.2");

        Promise[] _input_ = new Promise[1];
        _input_[0] = contextMap;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, com.mcmcg.media.workflow.service.domain.Response.class, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(java.util.Map<java.lang.String,java.lang.Object> contextMap) {
        return updateRerunStatusImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor) {
        return updateRerunStatusImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return updateRerunStatusImpl(Promise.asPromise(contextMap), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap) {
        return updateRerunStatusImpl(contextMap, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor) {
        return updateRerunStatusImpl(contextMap, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return updateRerunStatusImpl(contextMap, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatusImpl(final Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("7-UpdateRerunStatus");
		activityType.setVersion("1.3.2");

        Promise[] _input_ = new Promise[1];
        _input_[0] = contextMap;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, com.mcmcg.media.workflow.service.domain.Response.class, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(java.util.Map<java.lang.String,java.lang.Object> contextMap) {
        return updateWorkflowStateImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor) {
        return updateWorkflowStateImpl(Promise.asPromise(contextMap), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return updateWorkflowStateImpl(Promise.asPromise(contextMap), optionsOverride, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap) {
        return updateWorkflowStateImpl(contextMap, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor) {
        return updateWorkflowStateImpl(contextMap, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return updateWorkflowStateImpl(contextMap, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowStateImpl(final Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("1-UpdateWorkflowState");
		activityType.setVersion("1.3.2");

        Promise[] _input_ = new Promise[1];
        _input_[0] = contextMap;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, com.mcmcg.media.workflow.service.domain.Response.class, waitFor);
    }

}