/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.mcmcg.media.workflow.swf.activity;

import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.ActivitiesClient;
import com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions;

/**
 * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities}. 
 * Used to invoke activities asynchronously from workflow code.
 */
public interface IngestionActivitiesClient extends ActivitiesClient
{

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#autoValidation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(java.util.Map<java.lang.String,java.lang.Object> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#autoValidation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#autoValidation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#autoValidation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#autoValidation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#autoValidation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> autoValidation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#extraction}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(java.util.Map<java.lang.String,java.lang.Object> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#extraction}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#extraction}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#extraction}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#extraction}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#extraction}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> extraction(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#pdfTagging}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(java.util.Map<java.lang.String,java.lang.Object> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#pdfTagging}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#pdfTagging}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#pdfTagging}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#pdfTagging}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#pdfTagging}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> pdfTagging(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#receive}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(java.util.Map<java.lang.String,java.lang.Object> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#receive}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#receive}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#receive}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#receive}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#receive}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.AccountOALDModel>> receive(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#statementTranslation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(java.util.Map<java.lang.String,java.lang.Object> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#statementTranslation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#statementTranslation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#statementTranslation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#statementTranslation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#statementTranslation}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.MediaMetadataModel>> statementTranslation(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateRerunStatus}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(java.util.Map<java.lang.String,java.lang.Object> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateRerunStatus}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateRerunStatus}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateRerunStatus}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateRerunStatus}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateRerunStatus}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateRerunStatus(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateWorkflowState}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(java.util.Map<java.lang.String,java.lang.Object> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateWorkflowState}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(java.util.Map<java.lang.String,java.lang.Object> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateWorkflowState}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(java.util.Map<java.lang.String,java.lang.Object> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateWorkflowState}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateWorkflowState}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, Promise<?>... waitFor);

    /**
     * Generated from {@link com.mcmcg.media.workflow.swf.activity.IngestionActivities#updateWorkflowState}
     */
    Promise<com.mcmcg.media.workflow.service.domain.Response<com.mcmcg.media.workflow.service.domain.BaseDomain>> updateWorkflowState(Promise<java.util.Map<java.lang.String,java.lang.Object>> contextMap, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor);

}